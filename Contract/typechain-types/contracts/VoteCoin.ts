/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface VoteCoinInterface extends utils.Interface {
  functions: {
    "Finish(uint32)": FunctionFragment;
    "Pass(uint32)": FunctionFragment;
    "PutForword(string,uint32)": FunctionFragment;
    "Reject(uint32)": FunctionFragment;
    "member(uint256)": FunctionFragment;
    "pro_num()": FunctionFragment;
    "proposalFee()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "rewords()": FunctionFragment;
    "voteERC20()": FunctionFragment;
    "voteFee()": FunctionFragment;
    "voted(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "Finish"
      | "Pass"
      | "PutForword"
      | "Reject"
      | "member"
      | "pro_num"
      | "proposalFee"
      | "proposals"
      | "rewords"
      | "voteERC20"
      | "voteFee"
      | "voted"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "Finish",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "Pass",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "PutForword",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "Reject",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "member",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "pro_num", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "rewords", values?: undefined): string;
  encodeFunctionData(functionFragment: "voteERC20", values?: undefined): string;
  encodeFunctionData(functionFragment: "voteFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "Finish", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Pass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PutForword", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Reject", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "member", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pro_num", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewords", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voteFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voted", data: BytesLike): Result;

  events: {};
}

export interface VoteCoin extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoteCoinInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    Finish(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    Pass(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    PutForword(
      pro_content: PromiseOrValue<string>,
      hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    Reject(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    member(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pro_num(overrides?: CallOverrides): Promise<[number]>;

    proposalFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, number, string, number, BigNumber] & {
        id: number;
        content: string;
        pros: number;
        cons: number;
        presenter: string;
        time: number;
        DDL: BigNumber;
      }
    >;

    rewords(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteERC20(overrides?: CallOverrides): Promise<[string]>;

    voteFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    voted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { voter: string; Pid: number }>;
  };

  Finish(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  Pass(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  PutForword(
    pro_content: PromiseOrValue<string>,
    hour: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  Reject(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  member(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  pro_num(overrides?: CallOverrides): Promise<number>;

  proposalFee(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, number, number, string, number, BigNumber] & {
      id: number;
      content: string;
      pros: number;
      cons: number;
      presenter: string;
      time: number;
      DDL: BigNumber;
    }
  >;

  rewords(overrides?: CallOverrides): Promise<BigNumber>;

  voteERC20(overrides?: CallOverrides): Promise<string>;

  voteFee(overrides?: CallOverrides): Promise<BigNumber>;

  voted(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number] & { voter: string; Pid: number }>;

  callStatic: {
    Finish(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    Pass(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    PutForword(
      pro_content: PromiseOrValue<string>,
      hour: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    Reject(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    member(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    pro_num(overrides?: CallOverrides): Promise<number>;

    proposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, number, number, string, number, BigNumber] & {
        id: number;
        content: string;
        pros: number;
        cons: number;
        presenter: string;
        time: number;
        DDL: BigNumber;
      }
    >;

    rewords(overrides?: CallOverrides): Promise<BigNumber>;

    voteERC20(overrides?: CallOverrides): Promise<string>;

    voteFee(overrides?: CallOverrides): Promise<BigNumber>;

    voted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number] & { voter: string; Pid: number }>;
  };

  filters: {};

  estimateGas: {
    Finish(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    Pass(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    PutForword(
      pro_content: PromiseOrValue<string>,
      hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    Reject(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    member(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pro_num(overrides?: CallOverrides): Promise<BigNumber>;

    proposalFee(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewords(overrides?: CallOverrides): Promise<BigNumber>;

    voteERC20(overrides?: CallOverrides): Promise<BigNumber>;

    voteFee(overrides?: CallOverrides): Promise<BigNumber>;

    voted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Finish(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    Pass(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    PutForword(
      pro_content: PromiseOrValue<string>,
      hour: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    Reject(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    member(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pro_num(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewords(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteERC20(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
